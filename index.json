[{"authors":null,"categories":null,"content":"Today we’re going to look at how Kotin allows you to easily filter and aggregate a data set using higher-order functions like map, filter, and reduce.\n(While Kotlin does have a reduce function, we’ll go ahead and use Kotlin’s average function since we’re taking an average in this example.)\nThis example was inspired by Exercise 40 from Exercises for Programmers: 57 Challenges to Develop Your Coding Skills. by Brian P. Hogan. In that exercise, you’re provided with a dataset of employees. We’re going to whip up our own dataset inspired by the characters in everyone’s favorite 90’s cult office-themed movie, Office Space.\nWe’ll be implementing the following “queries” on our “database”:\n Find all employees where their last name matches a search string. Find all employees with a specific job title. Find all employees that have been terminated since a specific date. Get the average service time (in days) for all employees. Get the average service time (in days) for all employees with a specific job title.  Higher-order functions are simply functions that can either accept other functions as arguments or return functions as values (or both!):\n map returns a new collection where each item is transformed by the function we provide. filter returns a new collection where each item is only retained if it matches the predicate function (a function that returns true or false) we provide. reduce returns a single value calculated by starting with the first item in the collection and applying the function we provide to each successive element, accumulating the “total” along the way. If we’d used reduce instead of average, we could have provided Long::plus and then divided the return value by employees.count().  If you’d like to explore more of Kotlin’s higher-order collection functions, take a look at Common Operations in the Kotlin documentation.\n Code package dev.atomicrepos.kotlin.mfr import java.time.* import java.time.temporal.ChronoUnit data class Employee( val firstName: String, val lastName: String, val jobTitle: JobTitle, val startDate: LocalDate, val separationDate: LocalDate? = null ) enum class JobTitle { MANAGER, SOFTWARE_ENGINEER, DISTRICT_MANAGER, DBA, WEB_DEVELOPER } fun findByLastNameLike(match: String) = employees.filter { it.lastName.contains(match) } fun findByPosition(match: JobTitle) = employees.filter { it.jobTitle == match } fun findTerminatedSince(match: LocalDate) = employees.filter { it.separationDate?.isAfter(match) ?: false } fun getAverageServiceTime() = employees .map(Employee::startDate) .map { it.until(dateOfTest, ChronoUnit.DAYS) } .average() fun getAverageServiceTimeByJobTitle(match: JobTitle) = employees.filter { it.jobTitle == match } .map(Employee::startDate) .map { it.until(dateOfTest, ChronoUnit.DAYS) } .average() /** * Fixed Date of March 15, 2022. Used for date-based math. */ val dateOfTest: LocalDate = LocalDate.ofInstant( Clock.fixed( Instant.parse(\u0026#34;2022-03-15T00:00:00.00Z\u0026#34;), ZoneId.of(\u0026#34;America/Chicago\u0026#34;) ).instant(), ZoneId.of(\u0026#34;America/Chicago\u0026#34;) ) val employees = listOf( Employee( firstName = \u0026#34;Matt\u0026#34;, lastName = \u0026#34;Stine\u0026#34;, jobTitle = JobTitle.SOFTWARE_ENGINEER, startDate = LocalDate.of( 2001, Month.JANUARY, 12 ) // 7731 days of service ), Employee( firstName = \u0026#34;Peter\u0026#34;, lastName = \u0026#34;Gibbons\u0026#34;, jobTitle = JobTitle.MANAGER, startDate = LocalDate.of( 1995, Month.SEPTEMBER, 15 ) // 9677 days of service ), Employee( firstName = \u0026#34;Michael\u0026#34;, lastName = \u0026#34;Bolton\u0026#34;, jobTitle = JobTitle.WEB_DEVELOPER, startDate = LocalDate.of( 1999, Month.FEBRUARY, 19 ), // 8424 days of service separationDate = LocalDate.of( 2022, Month.JANUARY, 15 ) ), Employee( firstName = \u0026#34;Samir\u0026#34;, lastName = \u0026#34;Nagheenanajar\u0026#34;, jobTitle = JobTitle.WEB_DEVELOPER, startDate = LocalDate.of( 1999, Month.FEBRUARY, 19 ), // 8424 days of service separationDate = LocalDate.of( 2022, Month.JANUARY, 15 ) ), Employee( firstName = \u0026#34;Bill\u0026#34;, lastName = \u0026#34;Lumbergh\u0026#34;, jobTitle = JobTitle.DISTRICT_MANAGER, startDate = LocalDate.of( 1975, Month.APRIL, 4 ) // 17146 days of service ) )  Tests package dev.atomicrepos.kotlin.mfr import org.assertj.core.api.Assertions.assertThat import org.junit.Test import java.time.LocalDate import java.time.Month class MapFilterReduceTest { @Test fun canFindByLastNameLike() { assertThat( findByLastNameLike(\u0026#34;Na\u0026#34;) .firstOrNull() ?.lastName ).isEqualTo(\u0026#34;Nagheenanajar\u0026#34;) } @Test fun missingLastNameMatchReturnsNull() { assertThat( findByLastNameLike(\u0026#34;Waddams\u0026#34;) .firstOrNull() ).isNull() } @Test fun canFindByPosition() { assertThat( findByPosition(JobTitle.WEB_DEVELOPER) .firstOrNull() ?.lastName ).isEqualTo(\u0026#34;Bolton\u0026#34;) } @Test fun canFindEmployeesTerminatedSince() { assertThat( findTerminatedSince(LocalDate.of(2022, Month.JANUARY, 1)) ).size().isEqualTo(2) } @Test fun canGetAverageServiceTime() { assertThat(getAverageServiceTime()).isEqualTo(10280.4) } @Test fun canGetAverageServiceTimeByJobTitle() { assertThat(getAverageServiceTimeByJobTitle(JobTitle.WEB_DEVELOPER)).isEqualTo(8424.0) } }  ","date":1647216e3,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1647216e3,"objectID":"f8d25c87f5eeaed6d0ed63c8d2c683e8","permalink":"https://atomicrepos.dev/repos/map-filter-reduce-kotlin/","publishdate":"2022-03-14T00:00:00Z","relpermalink":"/repos/map-filter-reduce-kotlin/","section":"repos","summary":"How to Map/Filter/Reduce a List of Objects in Kotlin","tags":["kotlin"],"title":"Map/Filter/Reduce Kotlin","type":"repos"},{"authors":null,"categories":null,"content":"What would normally be in your README.md would go here.\npackage main import \u0026#34;fmt\u0026#34; func SayHello() string { return \u0026#34;Hello, World!\u0026#34; } func main() { fmt.Println(SayHello()) }  ","date":1646611200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646611200,"objectID":"6196040bafd194941ba27e5cf08a2ed8","permalink":"https://atomicrepos.dev/repos/hello-world-go/","publishdate":"2022-03-07T00:00:00Z","relpermalink":"/repos/hello-world-go/","section":"repos","summary":"Atomic Repos Template","tags":["template","go"],"title":"Hello, World!","type":"repos"},{"authors":null,"categories":null,"content":"What would normally be in your README.md would go here.\npackage dev.atomicrepos.java.hello_world; public class Hello { public static void main(String[] args) { System.out.println(new Hello().sayHello()); } public String sayHello() { return \u0026#34;Hello, World!\u0026#34;; } }  ","date":1646611200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646611200,"objectID":"fc6d5ca4f18a565e74c4264620b377f9","permalink":"https://atomicrepos.dev/repos/hello-world-java/","publishdate":"2022-03-07T00:00:00Z","relpermalink":"/repos/hello-world-java/","section":"repos","summary":"Atomic Repos Template","tags":["template","java"],"title":"Hello, World!","type":"repos"},{"authors":null,"categories":null,"content":"What would normally be in your README.md would go here.\npackage dev.atomicrepos.kotlin.hello fun main(args: Array\u0026lt;String\u0026gt;) { println(\u0026#34;Hello, World\u0026#34;) }  ","date":1646611200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646611200,"objectID":"460d423690e4bbb955351bd2f05284b5","permalink":"https://atomicrepos.dev/repos/hello-world-kotlin/","publishdate":"2022-03-07T00:00:00Z","relpermalink":"/repos/hello-world-kotlin/","section":"repos","summary":"Atomic Repos Template","tags":["template","kotlin"],"title":"Hello, World!","type":"repos"},{"authors":null,"categories":null,"content":"What would normally be in your README.md would go here.\nfn main() { println!(\u0026#34;Hello, world!\u0026#34;); }  ","date":1646611200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1646611200,"objectID":"cf9de794ffb2ae55660e2526b519ad07","permalink":"https://atomicrepos.dev/repos/hello-world-rust/","publishdate":"2022-03-07T00:00:00Z","relpermalink":"/repos/hello-world-rust/","section":"repos","summary":"Atomic Repos Template","tags":["template","rust"],"title":"Hello, World!","type":"repos"}]